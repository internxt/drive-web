diff --git a/node_modules/@internxt/sdk/.DS_Store b/node_modules/@internxt/sdk/.DS_Store
new file mode 100644
index 0000000..3cc50b2
Binary files /dev/null and b/node_modules/@internxt/sdk/.DS_Store differ
diff --git a/node_modules/@internxt/sdk/dist/.DS_Store b/node_modules/@internxt/sdk/dist/.DS_Store
new file mode 100644
index 0000000..381419f
Binary files /dev/null and b/node_modules/@internxt/sdk/dist/.DS_Store differ
diff --git a/node_modules/@internxt/sdk/dist/auth/index.d.ts b/node_modules/@internxt/sdk/dist/auth/index.d.ts
index a1a8bf7..3668c3f 100644
--- a/node_modules/@internxt/sdk/dist/auth/index.d.ts
+++ b/node_modules/@internxt/sdk/dist/auth/index.d.ts
@@ -101,6 +101,11 @@ export declare class Auth {
      * @param email
      */
     sendChangePasswordEmail(email: string): Promise<void>;
+    /**
+     * Upgrade hash in the database
+     * @param newHash
+     */
+    upgradeHash(newHash: string): Promise<void>;
     /**
      * Restore password with email link
      * @param token
diff --git a/node_modules/@internxt/sdk/dist/auth/index.js b/node_modules/@internxt/sdk/dist/auth/index.js
index 0389bcd..9073209 100644
--- a/node_modules/@internxt/sdk/dist/auth/index.js
+++ b/node_modules/@internxt/sdk/dist/auth/index.js
@@ -75,6 +75,8 @@ var Auth = /** @class */ (function () {
             salt: registerDetails.salt,
             privateKey: registerDetails.keys.privateKeyEncrypted,
             publicKey: registerDetails.keys.publicKey,
+            privateKyberKey: registerDetails.keys.privateKyberKeyEncrypted,
+            publicKyberKey: registerDetails.keys.publicKyberKey,
             revocationKey: registerDetails.keys.revocationCertificate,
             referral: registerDetails.referral,
             referrer: registerDetails.referrer,
@@ -96,6 +98,8 @@ var Auth = /** @class */ (function () {
             salt: registerDetails.salt,
             privateKey: registerDetails.keys.privateKeyEncrypted,
             publicKey: registerDetails.keys.publicKey,
+            privateKyberKey: registerDetails.keys.privateKyberKeyEncrypted,
+            publicKyberKey: registerDetails.keys.publicKyberKey,
             revocationKey: registerDetails.keys.revocationCertificate,
             referral: registerDetails.referral,
             referrer: registerDetails.referrer,
@@ -136,9 +140,11 @@ var Auth = /** @class */ (function () {
                     case 1:
                         securityDetails = _a.sent();
                         encryptedSalt = securityDetails.encryptedSalt;
-                        encryptedPasswordHash = cryptoProvider.encryptPasswordHash(details.password, encryptedSalt);
-                        return [4 /*yield*/, cryptoProvider.generateKeys(details.password)];
+                        return [4 /*yield*/, cryptoProvider.encryptPasswordHash(details.password, encryptedSalt)];
                     case 2:
+                        encryptedPasswordHash = _a.sent();
+                        return [4 /*yield*/, cryptoProvider.generateKeys(details.password)];
+                    case 3:
                         keys = _a.sent();
                         return [2 /*return*/, this.client
                                 .post('/access', {
@@ -148,6 +154,8 @@ var Auth = /** @class */ (function () {
                                 privateKey: keys.privateKeyEncrypted,
                                 publicKey: keys.publicKey,
                                 revocateKey: keys.revocationCertificate,
+                                publicKyberKey: keys.publicKyberKey,
+                                privateKyberKey: keys.privateKyberKeyEncrypted,
                             }, this.basicHeaders())
                                 .then(function (data) {
                                 // eslint-disable-next-line @typescript-eslint/ban-ts-comment
@@ -169,6 +177,8 @@ var Auth = /** @class */ (function () {
             publicKey: keys.publicKey,
             privateKey: keys.privateKeyEncrypted,
             revocationKey: keys.revocationCertificate,
+            publicKyberKey: keys.publicKyberKey,
+            privateKyberKey: keys.privateKyberKeyEncrypted,
         }, this.headersWithToken(token));
     };
     /**
@@ -271,6 +281,15 @@ var Auth = /** @class */ (function () {
             email: email,
         }, this.basicHeaders());
     };
+    /**
+     * Upgrade hash in the database
+     * @param newHash
+     */
+    Auth.prototype.upgradeHash = function (newHash) {
+        return this.client.post('/users/upgrade-hash', {
+            newHash: newHash,
+        }, this.basicHeaders());
+    };
     /**
      * Restore password with email link
      * @param token
diff --git a/node_modules/@internxt/sdk/dist/auth/types.d.ts b/node_modules/@internxt/sdk/dist/auth/types.d.ts
index c104ac5..d9ec1b8 100644
--- a/node_modules/@internxt/sdk/dist/auth/types.d.ts
+++ b/node_modules/@internxt/sdk/dist/auth/types.d.ts
@@ -33,9 +33,11 @@ export interface Keys {
     privateKeyEncrypted: string;
     publicKey: string;
     revocationCertificate: string;
+    publicKyberKey: string;
+    privateKyberKeyEncrypted: string;
 }
 export interface CryptoProvider {
-    encryptPasswordHash: (password: Password, encryptedSalt: string) => string;
+    encryptPasswordHash: (password: Password, encryptedSalt: string) => Promise<string>;
     generateKeys: (password: Password) => Promise<Keys>;
 }
 export declare class UserAccessError extends Error {
diff --git a/node_modules/@internxt/sdk/dist/drive/share/types.d.ts b/node_modules/@internxt/sdk/dist/drive/share/types.d.ts
index b9c0de7..c09fba3 100644
--- a/node_modules/@internxt/sdk/dist/drive/share/types.d.ts
+++ b/node_modules/@internxt/sdk/dist/drive/share/types.d.ts
@@ -172,6 +172,7 @@ export declare type ShareFolderWithUserPayload = {
     encryptionAlgorithm?: string;
     roleId: string;
     persistPreviousSharing?: boolean;
+    pqEnabled: boolean | false;
 };
 export declare type CreateSharingPayload = {
     itemId: string;
diff --git a/node_modules/@internxt/sdk/dist/drive/users/types.d.ts b/node_modules/@internxt/sdk/dist/drive/users/types.d.ts
index 60143e8..f6038c6 100644
--- a/node_modules/@internxt/sdk/dist/drive/users/types.d.ts
+++ b/node_modules/@internxt/sdk/dist/drive/users/types.d.ts
@@ -15,6 +15,7 @@ export interface ChangePasswordPayload {
 export declare type UpdateProfilePayload = Partial<Pick<UserSettings, 'name' | 'lastname'>>;
 export declare type PreCreateUserResponse = {
     publicKey: string;
+    publicKyberKey: string;
     user: {
         uuid: UUID;
         email: string;
@@ -28,6 +29,7 @@ export declare type FriendInvite = {
 };
 export declare type UserPublicKeyResponse = {
     publicKey: string;
+    publicKyberKey: string;
 };
 export declare type VerifyEmailChangeResponse = {
     oldEmail: string;
diff --git a/node_modules/@internxt/sdk/dist/shared/types/userSettings.d.ts b/node_modules/@internxt/sdk/dist/shared/types/userSettings.d.ts
index 1a78d69..b855661 100644
--- a/node_modules/@internxt/sdk/dist/shared/types/userSettings.d.ts
+++ b/node_modules/@internxt/sdk/dist/shared/types/userSettings.d.ts
@@ -18,6 +18,8 @@ export interface UserSettings {
     mnemonic: string;
     privateKey: string;
     publicKey: string;
+    privateKyberKey: string;
+    publicKyberKey: string;
     revocationKey: string;
     teams?: boolean;
     appSumoDetails: AppSumoDetails | null;
diff --git a/node_modules/@internxt/sdk/dist/workspaces/index.test.js b/node_modules/@internxt/sdk/dist/workspaces/index.test.js
index aebc27e..dbc2b54 100644
--- a/node_modules/@internxt/sdk/dist/workspaces/index.test.js
+++ b/node_modules/@internxt/sdk/dist/workspaces/index.test.js
@@ -70,6 +70,7 @@ describe('Workspaces service tests', function () {
                         id: '1',
                         memberId: 'member1',
                         key: 'user_key_1',
+                        pqEnabled: false,
                         workspaceId: 'workspace1',
                         spaceLimit: '10GB',
                         driveUsage: '2GB',
@@ -128,6 +129,7 @@ describe('Workspaces service tests', function () {
                         id: '2',
                         memberId: 'member2',
                         key: 'user_key_2',
+                        pqEnabled: false,
                         workspaceId: 'workspace2',
                         spaceLimit: '15GB',
                         driveUsage: '5GB',
@@ -229,6 +231,7 @@ describe('Workspaces service tests', function () {
                                 address: 'Workspace Address',
                                 description: 'Workspace Description',
                                 encryptedMnemonic: 'encryptedMnemonic',
+                                pqEnabled: false,
                             };
                             workspaceSetupInfo = __assign({ workspaceId: 'workspaceId' }, workspaceData);
                             _a = clientAndHeaders(), client = _a.client, headers = _a.headers;
@@ -463,7 +466,7 @@ describe('Workspaces service tests', function () {
         });
         describe('inviteMemberToWorkspace', function () {
             it('should invite a member to the workspace successfully', function () { return __awaiter(void 0, void 0, void 0, function () {
-                var workspaceId, invitedUserEmail, spaceLimitBytes, encryptedMnemonicInBase64, encryptionAlgorithm, _a, client, headers, postCall, message;
+                var workspaceId, invitedUserEmail, spaceLimitBytes, encryptedMnemonicInBase64, encryptionAlgorithm, _a, client, headers, postCall, message, pqEnabled;
                 return __generator(this, function (_b) {
                     switch (_b.label) {
                         case 0:
@@ -475,6 +478,7 @@ describe('Workspaces service tests', function () {
                             _a = clientAndHeaders(), client = _a.client, headers = _a.headers;
                             postCall = sinon_1.default.stub(httpClient, 'post').resolves();
                             message = 'Test message';
+                            pqEnabled = false;
                             return [4 /*yield*/, client.inviteMemberToWorkspace({
                                     workspaceId: workspaceId,
                                     invitedUserEmail: invitedUserEmail,
@@ -482,6 +486,7 @@ describe('Workspaces service tests', function () {
                                     encryptedMnemonicInBase64: encryptedMnemonicInBase64,
                                     encryptionAlgorithm: encryptionAlgorithm,
                                     message: message,
+                                    pqEnabled: pqEnabled,
                                 })];
                         case 1:
                             _b.sent();
diff --git a/node_modules/@internxt/sdk/dist/workspaces/types.d.ts b/node_modules/@internxt/sdk/dist/workspaces/types.d.ts
index 99be4ce..626ac3c 100644
--- a/node_modules/@internxt/sdk/dist/workspaces/types.d.ts
+++ b/node_modules/@internxt/sdk/dist/workspaces/types.d.ts
@@ -9,6 +9,7 @@ export interface WorkspaceUser {
     isManager: boolean;
     isOwner: boolean;
     key: string;
+    pqEnabled: boolean;
     member: Member;
     memberId: string;
     rootFolderId: string;
@@ -42,6 +43,7 @@ export declare type WorkspaceSetupInfo = {
     address: string;
     description: string;
     encryptedMnemonic: string;
+    pqEnabled: boolean | false;
 };
 export declare type PendingWorkspace = {
     address: string | null;
@@ -138,6 +140,7 @@ export declare type InviteMemberBody = {
     encryptedMnemonicInBase64: string;
     encryptionAlgorithm: string;
     message: string;
+    pqEnabled: boolean | false;
 };
 interface Invite {
     id: string;
